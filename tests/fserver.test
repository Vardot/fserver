<?php
/**
 * @file
 * Base test cases for Feature Server
 */

class FserverTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Feature Server Base Tests'),
      'description' => t('Test the base level API and data objects in Feature Server.'),
      'group' => t('Feature Server'),
    );
  }

  function setUp() {
    parent::setUp('fserver');
  }

  /**
   * Test valid project CRUD
   */
  function testFserverProjectCRUD() {
    $test_project_1 = array(
      'title' => 'Test Project 1',
      'type' => 'module', // Either module, distribution, or theme
      'short_name' => 'test_project_1',
      'recommended_major' => 1,  // Optional
      'supported_majors' => '1',  // Optional
      'link' => 'project link',  // Optional
      'project_status' => 'published',  // Optional
    );
    $test_project_2 = array(
      'title' => 'Test Project 1',
      'type' => 'module', // Either module, distribution, or theme
      'short_name' => 'test_project_1',
      'recommended_major' => 1,  // Optional
      'supported_majors' => '1',  // Optional
      'link' => 'project link',  // Optional
      'project_status' => 'published',  // Optional
    );
    $test_project_3 = array(
      'title' => 'Test Project 1',
      'type' => 'module', // Either module, distribution, or theme
      'short_name' => 'test_project_1',
      'recommended_major' => 1,  // Optional
      'supported_majors' => '1',  // Optional
      'link' => 'project link',  // Optional
      'project_status' => 'published',  // Optional
    );

    // Test basic project creation
    $result = fserver__project_create($test_project_1);
    $this->assertNotEqual(FALSE, $result, 'Create ' . $test_project_1['title'] . ' module');

    $result = fserver__project_create($test_project_2);
    $this->assertNotEqual(FALSE, $result, 'Create ' . $test_project_2['title'] . ' theme');

    $result = fserver__project_create($test_project_3);
    $this->assertNotEqual(FALSE, $result, 'Create ' . $test_project_3['title'] . ' distribution');

    // Test project existence
    $result = fserver__project_exists($test_project_1['short_name']);
    $this->assertTrue($result, $test_project_1['title'] . ' exists');

    $result = fserver__project_exists($test_project_2['short_name']);
    $this->assertTrue($result, $test_project_2['title'] . 'exists');

    $result = fserver__project_exists($test_project_3['short_name']);
    $this->assertTrue($result, $test_project_3['title'] . 'exists');

    $result = fserver__project_exists('fake_project');
    $this->assertFalse($result, 'fake_project does not exist');

    // Test project loading
    $load1 = fserver__project_load($test_project_1);
    $load2 = fserver__project_load($test_project_2);
    $load3 = fserver__project_load($test_project_3);

    /*
    fserver__project_load
    fserver__project_update
    fserver__project_delete
    */
  }

  /**
   * Test the APIs capacity to handle invalid project CRUD
   */
  function testFserverProjectCRUDInvalidValues() {

  }

  function testFserverReleaseCRUD() {
    /*
    fserver__release_create
    fserver__release_load
    fserver__release_load_by_project
    fserver__release_update
    fserver__release_delete
    */
  }
}

class FserverProjectReleaseTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Feature Server Project Release Tests'),
      'description' => t('Test the FserverProjectRelease objects (a.k.a. release history objects).'),
      'group' => t('Feature Server'),
    );
  }

  function setUp() {
    parent::setUp('fserver');
  }

  function testProjectReleaseData() {

  }

  function testProjectReleaseOrder() {

  }
}
