<?php
/**
 * @file
 * Code for the Feature Server feature.
 */

include_once 'fserver.features.inc';

define("FSERVER_VIEW_NAME_PROJECTS_ALL", 'fserver_projects');
define("FSERVER_VIEW_NAME_PROJECTS_SINGLE", 'fserver_project');

// @todo add project and release entity API functions

/**
 * Implements hook_entity_info_alter().
 */
function fserver_entity_info_alter(&$entity_info) {
  // Set the entity class for projects and releases
  $entity_info['project']['entity class'] = 'Project';
  $entity_info['project']['access callback'] = 'fserver_project_access';
  $entity_info['release']['entity class'] = 'Release';
  $entity_info['release']['access callback'] = 'fserver_release_access';
}

/**
 * Access callback for project entities
 */
function fserver_project_access($op, $project = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Access callback for release entities
 */
function fserver_release_access($op, $release = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function fserver_field_formatter_info() {
  return array(
    'file_fserver_xml' => array(
      'label' => t('FServer File XML'),
      'field types' => array('file'),
    ),
    'file_size' => array(
      'label' => t('File Size'),
      'field types' => array('file'),
    ),
    'file_hash_md5' => array(
      'label' => t('File MD5'),
      'field types' => array('file'),
    ),
  );
  
}

/**
 * Implements hook_field_formatter_view().
 */
function fserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'file_fserver_xml':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _fserver_file_fserver_xml($item));
      }
    break;
    case 'file_size': 
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['filesize']);
      }
    break;
    case 'file_hash_md5': 
      foreach ($items as $delta => $item) {
        if (isset($item['filehash']['md5'])) {
          $element[$delta] = array('#markup' => $item['filehash']['md5']);          
        }
        else {
          watchdog('fserver', 'No MD5 hash exists for fid: @fid', array('@fid' => $item['fid']), WATCHDOG_WARNING);
        }
      }
    break;
  }

  return $element;
}

/**
 * Generate the XML for a file field
 */
function _fserver_file_fserver_xml($item) {
  $filename = $item['filename'];

  $archive_type = '';
  if ('.tar.gz' == drupal_substr($item['filename'], -7)) {
    $archive_type = 'tar.gz';
  }
  elseif ('.tar' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tar';
  }
  elseif ('.tgz' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tgz';
  }
  elseif ('.zip' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'zip';
  }

  $xml = "\r\n<file>\r\n";
  $xml .= '<url>' . file_create_url($item['uri']) . "</url>\r\n";
  $xml .= '<archive_type>' . $archive_type . "</archive_type>\r\n";
  $xml .= '<md5>' . $item['filehash']['md5'] . "</md5>\r\n";
  $xml .= '<size>' . check_plain($item['filesize']) . "</size>\r\n";
  $xml .= '<filedate>' . $item['timestamp'] . "</filedate>\r\n";
  $xml .= "</file>\r\n";

  return $xml;
}

/**
 * Base class for Project entities
 */
class Project extends Entity {
  public function __construct($values = array()) {
    // @todo add constructor validation
    parent::__construct($values, 'project');
  }
  
  // @todo add function to load project by shortname
}

/**
 * Base class for Release entities
 */
class Release extends Entity {
  public function __construct($values = array()) {
    // @todo add release validation
    parent::__construct($values, 'release');
  }
  
  /**
   * Generate release name
   *
   * Pattern: <project_name> <api_version>-<release_version>
   * Ex: views 7.x-1.x-dev
   */
  protected function generateReleaseName() {
    $name = $this->__get('project_short_name');
    $name .= ' ' . $this->__get('api_version');
    $name .= $this->__get('version');
    $name .= $this->__get('tag');
    
    return $name;
  }
}