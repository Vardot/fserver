<?php
/**
 * @file
 * Code for the Feature Server feature.
 */

include_once 'fserver.features.inc';

define("FSERVER_VIEW_NAME_PROJECTS_ALL", 'fserver_projects');
define("FSERVER_VIEW_NAME_PROJECTS_SINGLE", 'fserver_project');

/**
 * Implements template_preprocess_views_data_export_xml_body().
 *//*
function fserver_preprocess_views_data_export_xml_body(&$vars) {
  $view =& $vars['view'];
  
  switch ($view->name) {
    case FSERVER_VIEW_NAME_PROJECTS_ALL:
      _fserver_preprocess_views_data_export_xml_body_projects_all($vars);
    break;
    default:
      // @todo see if there's a way to conditionally preprocess without
      // disabling other modules/themes capacity to preprocess

      // Pass through to the generic preprocess function
      template_preprocess_views_data_export_xml_body($vars);
  }
}// */

/**
 * Implement hook_views_pre_render().
 *//*
function fserver_views_pre_render(&$view) {
  if ($view->name == 'fserver_projects') {
    // Load the releases view data into this view
    if (!empty($view->result)) {
      foreach ($view->result as $key => $value) {
        $releases = views_get_view('fserver_releases');
        $releases->set_arguments(array($value->id));
        $releases->set_display('fserver_releases_xml');
        $releases->execute();
        $view->fserver_extra['releases'][$value->id] = $releases;
      }
    }    
  }
//  dpm($view);

}
//*/

/**
 * Preprocess xml output template.
 */
function fserver_preprocess_views_data_export_xml_body(&$vars) {
  if ($vars['view']->name = 'fserver_projects') {
    _views_data_export_header_shared_preprocess($vars);
    // We support not outputting fields when they are empty, so indicate so.
    $vars['hide_empty_support'] = TRUE;
    _views_data_export_body_shared_preprocess($vars);

    if (!empty($vars['options']['custom_item_node'])) {
      // Use the custom value
      $vars['item_node'] = _views_data_export_xml_tag_clean($vars['options']['custom_item_node']);
    }
    else {
      // Compute the tag name based on the views base table, minus any trailing 's'.
      $vars['item_node'] = _views_data_export_xml_tag_clean(rtrim($vars['view']->base_table, 's'));    
    }

    foreach ($vars['themed_rows'] as $num => $row) {
      foreach ($row as $field => $content) {
        if ($field != 'view' and $field != 'field_release_files') {
          // Prevent double encoding of the ampersand. Look for the entities produced by check_plain().
          $content = preg_replace('/&(?!(amp|quot|#039|lt|gt);)/', '&amp;', $content);
          // Convert < and > to HTML entities.
          $content = str_replace(
            array('<', '>'),
            array('&lt;', '&gt;'),
            $content);
          $vars['themed_rows'][$num][$field] = $content;
        }
      }
    }

    foreach ($vars['header'] as $field => $header) {
      // If there is no field label, use 'no name'.
      if (empty($header)) {
        $header = 'no name';
      }

      if ($vars['options']['transform_case'] and $vars['options']['transform_case'] != 'none') {
        if ($header != 'no name') {
          switch ($vars['options']['transform_case']) {
            case 'uppercase':
              $vars['xml_tag'][$field] = drupal_strtoupper($header);
            break;
            case 'lowercase':
              $vars['xml_tag'][$field] = drupal_strtolower($header);
            break;
          }

          // Reset header for further transformations
          $header = $vars['xml_tag'][$field];
        }
      }

      if ($vars['options']['transform']) {
        switch ($vars['options']['transform_type']) {
          case 'dash':
            $vars['xml_tag'][$field] = str_replace(' ', '-', $header);
            break;
          case 'underline':
            $vars['xml_tag'][$field] = str_replace(' ', '_', $header);
            break;
          case 'camel':
            $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
            // Convert the very first character of the string to lowercase.
            $vars['xml_tag'][$field][0] = strtolower($vars['xml_tag'][$field][0]);
            break;
          case 'pascal':
            $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
            break;
        }
      }
      // We should always try to output valid XML.
      $vars['xml_tag'][$field] = _views_data_export_xml_tag_clean($vars['xml_tag'][$field]);
    }
  }
  else {
    template_preprocess_views_data_export_xml_body($vars);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function fserver_field_formatter_info() {
  return array(
    'file_fserver_xml' => array(
      'label' => t('FServer File XML'),
      'field types' => array('file'),
    ),
    'file_size' => array(
      'label' => t('File Size'),
      'field types' => array('file'),
    ),
    'file_hash_md5' => array(
      'label' => t('File MD5'),
      'field types' => array('file'),
    ),
  );
  
}

/**
 * Implements hook_field_formatter_view().
 */
function fserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'file_fserver_xml':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _fserver_file_fserver_xml($item));
      }
    break;
    case 'file_size': 
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['filesize']);
      }
    break;
    case 'file_hash_md5': 
      foreach ($items as $delta => $item) {
        if (isset($item['filehash']['md5'])) {
          $element[$delta] = array('#markup' => $item['filehash']['md5']);          
        }
        else {
          watchdog('fserver', 'No MD5 hash exists for fid: @fid', array('@fid' => $item['fid']), WATCHDOG_WARNING);
        }
      }
    break;
  }

  return $element;
}

/**
 * Generate the XML for a file field
 */
function _fserver_file_fserver_xml($item) {
  $filename = $item['filename'];
  // @todo find a better way to detect the file extension
  // Defaults to zip
  $archive_type = 'zip';
  if (FALSE !== strpos($item['filename'], '.tar.gz')) {
    $archive_type = 'tar.gz';
  }
  elseif (FALSE !== strpos($item['filename'], '.tar')) {
    $archive_type = 'tar';
  }

  $xml = "<file>\r\n";
  $xml .= '<size>' . check_plain($item['filesize']) . "</size>\r\n";
  $xml .= '<url>' . file_create_url($item['uri']) . "</url>\r\n";
  $xml .= '<archive_type>' . $archive_type . "</archive_type>\r\n";
  $xml .= "</file>\r\n";

  return $xml;
}