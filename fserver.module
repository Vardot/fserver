<?php
/**
 * @file
 * Code for the Feature Server feature.
 */

include_once 'fserver.features.inc';
include_once 'includes/fserver.entity.inc';
include_once 'includes/fserver.entity_type.inc';

define("FSERVER_VIEW_NAME_PROJECTS_ALL", 'fserver_projects');
define("FSERVER_VIEW_NAME_PROJECTS_SINGLE", 'fserver_project');

/**
 * Implements hook_permission().
 */
function fserver_permission() {
  $permissions = array();
  $permissions['administer fserver'] =  array(
    'title' => t('Administer Feature Server'),
    'description' => t('Perform administration tasks for Feature Server.'),
  );

  // @todo add per-bundle permissions

  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function fserver_entity_info() {
  $info = array();

  $info['project_type'] = array(
    'label' => t('Project Type'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'Entity',
    'base table' => 'fserver_project_type',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'description',
      'name' => 'type',
      'uuid' => 'uuid'
    ),
    'bundle of' => 'project',
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_project_type',
    ),
    'uuid' => TRUE,
    'module' => 'fserver',
    'access callback' => 'project_type_access',
    'entity cache' => module_exists('entitycache'),
    'metadata controller class' => 'FserverProjectTypeMetadataController',
    'admin ui' => array(
      'path' => 'admin/structure/project_types',
      'file' => 'includes/fserver.admin.inc',
    ),
  );

  $info['release_type'] = array(
    'label' => t('Release Type'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'Entity',
    'base table' => 'fserver_release_type',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'description',
      'name' => 'type',
      'uuid' => 'uuid'
    ),
    'bundle of' => 'release',
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_release_type',
    ),
    'uuid' => TRUE,
    'module' => 'fserver',
    'access callback' => 'release_type_access',
    'entity cache' => module_exists('entitycache'),
    'metadata controller class' => 'FserverReleaseTypeMetadataController',
    'admin ui' => array(
      'path' => 'admin/structure/release_types',
      'file' => 'includes/fserver.admin.inc',
    ),
  );

  $info['project'] = array(
    'label' => t('Project'),
    'entity class' => 'FserverProject',
    'controller class' => 'FserverProjectController',
    'base table' => 'fserver_project',
    'fieldable' => TRUE,
    'uuid' => TRUE,
    'entity cache' => module_exists('entitycache'),
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'uuid' => 'uuid',
      'name' => 'name',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'fserver',
    'access callback' => 'project_access',
    'metadata controller class' => 'FserverProjectMetadataController',
    'admin ui' => array(
      'path' => 'admin/content/projects',
      'file' => 'includes/fserver.admin.inc',
    ),
  );

  $info['release'] = array(
    'label' => t('Release'),
    'entity class' => 'FserverRelease',
    'controller class' => 'FserverReleaseController',
    'base table' => 'fserver_release',
    'fieldable' => TRUE,
    'uuid' => TRUE,
    'entity cache' => module_exists('entitycache'),
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'uuid' => 'uuid',
      'name' => 'name',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'fserver',
    'access callback' => 'release_access',
    'metadata controller class' => 'FserverReleaseMetadataController',
    'admin ui' => array(
      'path' => 'admin/content/releases',
      'file' => 'includes/fserver.admin.inc',
    ),
  );

  return $info;
}

/**
 * Access callback for release types
 */
function release_type_access($op, $entity, $account, $entity_type) {
  // @todo
  return TRUE;
}

/**
 * Access callback for project types
 */
function project_type_access($op, $entity, $account, $entity_type) {
  // @todo
  return TRUE;
}

// @todo replace with something similar to https://git.dropfort.com/dropfort/dropfort_project/blob/7.x-1.x/dropfort_project.module#L622
/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_module_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_edit_project_module_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_theme_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_edit_project_theme_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}


/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_distribution_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_edit_project_distribution_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_release_release_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_release_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_edit_release_release_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_release_form($form, $form_state);
}

/**
 * Implements hook_field_formatter_info().
 */
function fserver_field_formatter_info() {
  return array(
    'file_size' => array(
      'label' => t('File Size'),
      'field types' => array('file'),
    ),
    'file_hash_md5' => array(
      'label' => t('File MD5'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function fserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'file_size':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['filesize']);
      }
    break;
    case 'file_hash_md5':
      foreach ($items as $delta => $item) {
        if (isset($item['filehash']['md5'])) {
          $element[$delta] = array('#markup' => $item['filehash']['md5']);
        }
        else {
          watchdog('fserver', 'No MD5 hash exists for fid: @fid', array('@fid' => $item['fid']), WATCHDOG_WARNING);
        }
      }
    break;
  }

  return $element;
}

/**
 * Generate the XML for a file field
 */
function _fserver_release_file_format($item) {

  $archive_type = '';
  if ('.tar.gz' == drupal_substr($item['filename'], -7)) {
    $archive_type = 'tar.gz';
  }
  elseif ('.tar' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tar';
  }
  elseif ('.tgz' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tgz';
  }
  elseif ('.zip' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'zip';
  }

  $file['archive_type'] = $archive_type;

  $file['url'] = file_create_url($item['uri']);
  $file['md5'] = $item['filehash']['md5'];
  $file['size'] = check_plain($item['filesize']);
  $file['filedate'] = $item['timestamp'];

  return $file;
}

/**
 * Check if project exists
 *
 * @param string $shortname
 *  Project short name
 *
 * @return boolean
 *  Returns TRUE if a project by that name exists, FALSE otherwise.
 */
function fserver__project_exists($shortname) {
  $query = new EntityFieldQuery();
  $project = $query
    ->EntityCondition("entity_type", "project")
    ->propertyCondition("short_name", $shortname)
    ->execute();
  if (!isset($project['project'])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Create an fserver project
 *
 * $project array(
 *   'title' => 'Long Project Tile',
 *   'type' => 'module', // Either module, distribution, or theme
 *   'short_name' => 'project_name',
 *   'recommended_major => 1,  // Optional
 *   'supported_majors' => '1',  // Optional
 *   'link' => 'project link',  // Optional
 *   'project_status' => 'published',  // Optional
 * );
 */
function fserver__project_create($project) {
  $entity = entity_create('project', $project);
  if ($entity === FALSE) {
    return FALSE;
  }
  return entity_save('project', $entity);
}

/**
 * Load an fserver project by shortname
 *
 * @param string $shortname
 *  Project shortname
 */
function fserver__project_load($shortname) {
  $query = new EntityFieldQuery();
  $project = $query
    ->EntityCondition("entity_type", "project")
    ->propertyCondition("short_name", $shortname)
    ->execute();
  if (!isset($project['project'])) {
    return FALSE;
  }

  $project = array_keys($project['project']);
  $project = entity_load('project', $project);
  return array_pop($project);
}

/**
 *  Update an fserver project
 */
function fserver__project_update($project) {
  return entity_save('project', (object) $project);
}

/**
 * Delete an fserver project
 */
function fserver__project_delete($shortname) {
  $project = fserver__project_load($shortname);
  if ($project === FALSE) {
    return FALSE;
  }
  return entity_delete('project', $project->id);
}

/**
 * Create an fserver release
 *
 * $release array(
 *   'api' = '7.x',
 *   'type' => 'release',
 *   'version_major' => '1',
 *   'version_patch' => '',  // Optional
 *   'version_extra' => 'dev',  // Optional
 * );
 */
function fserver__release_create($release) {
  $entity = entity_create('release', $release);
  if ($entity === FALSE) {
    return FALSE;
  }
  // @todo - fix this: entity_save should return one of: SAVED_UPDATED or SAVED_NEW constants, but currently returns false
  if (entity_save('release', $entity)) {
    return $entity;
  }
  //return FALSE;
  return $entity;
}

/**
 * Load an fserver release
 */
function fserver__release_load($name) {
  $query = new EntityFieldQuery();
  $release = $query
    ->EntityCondition("entity_type", "release")
    ->propertyCondition("name", $name)
    ->execute();
  if (!isset($release['release'])) {
    return FALSE;
  }

  $release = array_keys($release['release']);
  $release = entity_load('release', $release);
  return array_pop($release);
}

/**
 * Load all release entities for a given project
 *
 * Note that the dev release will also be the last item in the array.
 *
 * @param string $shortname
 *  Project short name
 * @param string $api
 *  API version
 * @return array|boolean
 *  Returns an array of entities, FALSE otherwise.
 */
function fserver__release_load_by_project($shortname, $api) {
  $project = fserver__project_load_by_name($shortname);

  if (!isset($project->id)) {
    return FALSE;
  }

  $query = new EntityFieldQuery();
  $releases = $query
    ->EntityCondition("entity_type", "release")
    ->fieldCondition("field_project_reference", "target_id", $project->id)
    ->propertyCondition("api", $api)
    ->propertyOrderBy('date', 'DESC')
    ->execute();
  if (!isset($releases['release'])) {
    return FALSE;
  }

  $releases = array_keys($releases['release']);
  $releases = entity_load('release', $releases);

  // Append dev release to the end of the array
  foreach ($releases as $id => $release) {
    if ($release->version_extra == 'dev') {
      unset($releases[$id]);
      $releases[] = $release;
      break;
    }
  }

  return $releases;
}

/**
 * Update an fserver release
 */
function fserver__release_update($release) {
  return entity_save('release', (object) $release);
}

/**
 * Delete an fserver release
 */
function fserver__release_delete($name) {
  $release = fserver__release_load($name);
  if ($release === FALSE) {
    return FALSE;
  }
  return entity_delete('release', $release->id);
}

/**
 * Options list callback for the supported_majors property
 */
function _fserver_project_property_supported_majors_options() {
  // @todo make this intelligent by looking at the attached releases
  // @todo
  return array(
    '5.x' => t('5.x'),
    '6.x' => t('6.x'),
    '7.x' => t('7.x'),
    '8.x' => t('8.x'),
  );
}

/**
 * Options list callback for the recommended_majors property
 */
function _fserver_project_property_recommended_majors_options() {
  // @todo make this intelligent by looking at the attached releases
  return array(
    1 => 1,
    2 => 2,
    3 => 3,
    4 => 4,
  );
}