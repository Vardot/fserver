<?php
/**
 * @file
 * Code for the Feature Server feature.
 */

include_once 'fserver.features.inc';

define("FSERVER_VIEW_NAME_PROJECTS_ALL", 'fserver_projects');
define("FSERVER_VIEW_NAME_PROJECTS_SINGLE", 'fserver_project');

/**
 * Implements hook_ctools_plugin_directory().
 */
function fserver_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'eck' && $plugin_type == 'property_behavior') {
    return 'plugins/' . $plugin_type;
  }
}


/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_module_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_theme_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_project_distribution_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_project_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_add_release_release_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_release_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function fserver_form_eck__entity__form_edit_release_release_alter(&$form, &$form_state) {
  module_load_include('inc', 'fserver', 'fserver.pages');
  fserver_release_form($form, $form_state);
}

/**
 * Implements hook_entity_info_alter().
 */
function fserver_entity_info_alter(&$entity_info) {
  // Set the entity class for projects and releases
  if (isset($entity_info['project'])) {
    $entity_info['project']['entity class'] = 'fserverProject';
    $entity_info['project']['access callback'] = 'fserver_project_access';
    $entity_info['project']['controller class'] = 'fserverProjectController';
  }

  if (isset($entity_info['release'])) {
    $entity_info['release']['entity class'] = 'fserverRelease';
    $entity_info['release']['access callback'] = 'fserver_release_access';
    $entity_info['release']['controller class'] = 'fserverReleaseController';
  }
}

/**
 * Access callback for project entities
 */
function fserver_project_access($op, $project = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Access callback for release entities
 */
function fserver_release_access($op, $release = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function fserver_field_formatter_info() {
  return array(
    'file_size' => array(
      'label' => t('File Size'),
      'field types' => array('file'),
    ),
    'file_hash_md5' => array(
      'label' => t('File MD5'),
      'field types' => array('file'),
    ),
  );

}

/**
 * Implements hook_field_formatter_view().
 */
function fserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'file_size':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['filesize']);
      }
    break;
    case 'file_hash_md5':
      foreach ($items as $delta => $item) {
        if (isset($item['filehash']['md5'])) {
          $element[$delta] = array('#markup' => $item['filehash']['md5']);
        }
        else {
          watchdog('fserver', 'No MD5 hash exists for fid: @fid', array('@fid' => $item['fid']), WATCHDOG_WARNING);
        }
      }
    break;
  }

  return $element;
}

/**
 * Generate the XML for a file field
 */
function _fserver_release_file_format($item) {

  $archive_type = '';
  if ('.tar.gz' == drupal_substr($item['filename'], -7)) {
    $archive_type = 'tar.gz';
  }
  elseif ('.tar' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tar';
  }
  elseif ('.tgz' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'tgz';
  }
  elseif ('.zip' == drupal_substr($item['filename'], -4)) {
    $archive_type = 'zip';
  }

  $file['archive_type'] = $archive_type;

  $file['url'] = file_create_url($item['uri']);
  $file['md5'] = $item['filehash']['md5'];
  $file['size'] = check_plain($item['filesize']);
  $file['filedate'] = $item['timestamp'];

  return $file;
}


/**
 * Check if project exists
 *
 * @param string $shortname
 *  Project short name
 *
 * @return boolean
 *  Returns TRUE if a project by that name exists, FALSE otherwise.
 */
function fserver__project_exists($shortname) {
  $query = new EntityFieldQuery();
  $project = $query
    ->EntityCondition("entity_type", "project")
    ->propertyCondition("short_name", $shortname)
    ->execute();
  if (!isset($project['project'])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Create an fserver project
 *
 * $project array(
 *   'title' => 'Long Project Tile',
 *   'type' => 'module', // Either module, distribution, or theme
 *   'short_name' => 'project_name',
 *   'recommended_major => 1,  // Optional
 *   'supported_majors' => '1',  // Optional
 *   'link' => 'project link',  // Optional
 *   'project_status' => 'published',  // Optional
 * );
 */
function fserver__project_create($project) {
  $entity = entity_create('project', $project);
  if ($entity === FALSE) {
    return FALSE;
  }
  return entity_save('project', $entity);
}


/**
 * Load an fserver project by shortname
 *
 * @param string $shortname
 *  Project shortname
 */
function fserver__project_load($shortname) {
  $query = new EntityFieldQuery();
  $project = $query
    ->EntityCondition("entity_type", "project")
    ->propertyCondition("short_name", $shortname)
    ->execute();
  if (!isset($project['project'])) {
    return FALSE;
  }

  $project = array_keys($project['project']);
  $project = entity_load('project', $project);
  return array_pop($project);
}


/**
 *  Update an fserver project
 */
function fserver__project_update($project) {
  return entity_save('project', (object) $project);
}


/**
 * Delete an fserver project
 */
function fserver__project_delete($shortname) {
  $project = fserver__project_load($shortname);
  if ($project === FALSE) {
    return FALSE;
  }
  return entity_delete('project', $project->id);
}


/**
 * Create an fserver release
 *
 * $release array(
 *   'project_short_name' => 'project_name',
 *   'api' = '7.x',
 *   'type' => 'release',
 *   'version_major' => '1',
 *   'version_patch' => '',  // Optional
 *   'version_extra' => 'dev',  // Optional
 * );
 */
function fserver__release_create($release) {
  $entity = entity_create('release', $release);
  if ($entity === FALSE) {
    return FALSE;
  }
  return entity_save('project', $entity);
}


/**
 * Load an fserver release
 */
function fserver__release_load($name) {
  $query = new EntityFieldQuery();
  $release = $query
    ->EntityCondition("entity_type", "release")
    ->propertyCondition("name", $name)
    ->execute();
  if (!isset($release['release'])) {
    return FALSE;
  }

  $release = array_keys($release['release']);
  $release = entity_load('release', $release);
  return array_pop($release);
}

/**
 * Load all release entities for a given project
 *
 * Note that the dev release will also be the last item in the array.
 *
 * @param string $shortname
 *  Project short name
 * @param string $api
 *  API version
 * @return array|boolean
 *  Returns an array of entities, FALSE otherwise.
 */
function fserver__release_load_by_project($shortname, $api) {
  $query = new EntityFieldQuery();
  $releases = $query
    ->EntityCondition("entity_type", "release")
    ->propertyCondition("project_short_name", $shortname)
    ->propertyCondition("api", $api)
    ->propertyOrderBy('date', 'DESC')
    ->execute();
  if (!isset($releases['release'])) {
    return FALSE;
  }

  $releases = array_keys($releases['release']);
  $releases = entity_load('release', $releases);

  // Append dev release to the end of the array
  foreach ($releases as $id => $release) {
    if ($release->version_extra == 'dev') {
      unset($releases[$id]);
      $releases[] = $release;
      break;
    }
  }

  return $releases;
}

/**
 * Update an fserver release
 */
function fserver__release_update($release) {
  return entity_save('release', (object) $release);
}


/**
 * Delete an fserver release
 */
function fserver__release_delete($name) {
  $release = fserver__release_load($name);
  if ($release === FALSE) {
    return FALSE;
  }
  return entity_delete('release', $release->id);
}


/**
 * Base class for Project entities
 */
class fserverProject extends Entity {
  public function __construct($values = array()) {
    // @todo add constructor validation
    parent::__construct($values, 'project');
  }
}

/**
 * Controller class for Project entities
 */
class fserverProjectController extends EntityAPIController {
  public function delete($ids, DatabaseTransaction $transaction = NULL) {

    $entities = $ids ? $this->load($ids) : FALSE;
    if (!$entities) {
      // Do nothing, in case invalid or no ids have been passed.
      return;
    } else {
      foreach ($entities as $entity) {
        $query = new EntityFieldQuery();
        $releases = $query
          ->entityCondition('entity_type', 'release')
          ->propertyCondition('project_short_name', $entity->short_name)
          ->execute();
        if (isset($releases['release'])) {
          entity_delete_multiple('release', array_keys($releases['release']));
        }
      }
    }
    parent::delete($ids, $transaction);
  }
}

/**
 * Base class for Release entities
 */
class fserverRelease extends Entity {
  public function __construct($values = array()) {
    // @todo add release validation
    parent::__construct($values, 'release');

    $this->generateReleaseName($values);
  }

  /**
   * Generate release name
   *
   * Pattern: <project_name> <api_version>-<release_version>
   * Ex: views 7.x-1.x-dev
   *
   * @param array $args [optional]
   *  List of arguments passed into the constructor. Used to determine
   *  how the release object is being created.
   */
  public function generateReleaseName($args = array()) {

    if (isset($args['is_new']) and $args['is_new'] == TRUE) {
      // For now we do basic detection on new objects. But we
      // should instead detect if the values for the name field
      // are set.
      // @todo
    }
    else {
      if (!empty($this->version_patch)) {
        $this->tag = $this->api . '-' . $this->version_major . '.' . $this->version_patch . '-' . $this->version_extra;
        $this->version = $this->tag;
      } else {
        $this->tag = $this->api . '-' . $this->version_major . '.x';
        $this->version = $this->tag . '-' . $this->version_extra;
      }

      $this->name = $this->project_short_name . ' ' . $this->version;
    }
  }
}

/**
 * Controller class for Release entities
 */
class fserverReleaseController extends EntityAPIController {
  public function save($entity, DatabaseTransaction $transaction = NULL) {
    $entity->date = time();
    $entity->generateReleaseName();
    parent::save($entity, $transaction);
  }
}

/**
 * Project and releases in one object.
 *
 * Used to generate the update XML for a given project.
 */
class fserverProjectRelease {
  protected $project;

  /**
   * 
   */
  public function __construct($project, $api) {
    if (is_object($project) and get_class($project) == 'fserverProject') {
      $this->project = $project;
      $this->prepareReleases($api);
      $this->prepareProject();
    }
    else {
      $this->project = FALSE;
    }
  }
  
  public function getProject() {
    return $this->project;
  }
  
  private function prepareReleases($api) {
    $releases = fserver__release_load_by_project($this->project->short_name);
    if (is_array($releases)) {
      foreach ($releases as &$release) {
        unset($release->id);
        unset($release->type);
        unset($release->project_short_name);
        unset($uid);
        $files = array();
        foreach ($release['field_release_files'][LANGUAGE_NONE] as $key => $file) {
          $files[$key] = _fserver_release_file_format($file);
        }
      }      
    }
    
    $releases->files = $files;
    $this->releases = $releases;
  }
  
  private function prepareProject() {
    unset($this->project->id);
  }
}