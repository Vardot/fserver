<?php
/**
 * @file
 * Code for the Feature Server feature.
 */

include_once 'fserver.features.inc';

define("FSERVER_VIEW_NAME_PROJECTS_ALL", 'fserver_projects');
define("FSERVER_VIEW_NAME_PROJECTS_SINGLE", 'fserver_project');

/**
 * Preprocess xml output template.
 */
function fserver_preprocess_views_data_export_xml_body(&$vars) {
  // Only preprocess certain views
  if ($vars['view']->name = 'fserver_projects') {
    _views_data_export_header_shared_preprocess($vars);
    // We support not outputting fields when they are empty, so indicate so.
    $vars['hide_empty_support'] = TRUE;
    _views_data_export_body_shared_preprocess($vars);

    if (!empty($vars['options']['custom_item_node'])) {
      // Use the custom value
      $vars['item_node'] = _views_data_export_xml_tag_clean($vars['options']['custom_item_node']);
    }
    else {
      // Compute the tag name based on the views base table, minus any trailing 's'.
      $vars['item_node'] = _views_data_export_xml_tag_clean(rtrim($vars['view']->base_table, 's'));    
    }

    foreach ($vars['themed_rows'] as $num => $row) {
      foreach ($row as $field => $content) {
        if ($field != 'view') {
          // Prevent double encoding of the ampersand. Look for the entities produced by check_plain().
          $content = preg_replace('/&(?!(amp|quot|#039|lt|gt);)/', '&amp;', $content);
          // Convert < and > to HTML entities.
          $content = str_replace(
            array('<', '>'),
            array('&lt;', '&gt;'),
            $content);
          $vars['themed_rows'][$num][$field] = $content;
        }
      }
    }

    foreach ($vars['header'] as $field => $header) {
      // If there is no field label, use 'no name'.
      if (empty($header)) {
        $header = 'no name';
      }

      if ($vars['options']['transform_case'] and $vars['options']['transform_case'] != 'none') {
        if ($header != 'no name') {
          switch ($vars['options']['transform_case']) {
            case 'uppercase':
              $vars['xml_tag'][$field] = drupal_strtoupper($header);
            break;
            case 'lowercase':
              $vars['xml_tag'][$field] = drupal_strtolower($header);
            break;
          }

          // Reset header for further transformations
          $header = $vars['xml_tag'][$field];
        }
      }

      if ($vars['options']['transform']) {
        switch ($vars['options']['transform_type']) {
          case 'dash':
            $vars['xml_tag'][$field] = str_replace(' ', '-', $header);
            break;
          case 'underline':
            $vars['xml_tag'][$field] = str_replace(' ', '_', $header);
            break;
          case 'camel':
            $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
            // Convert the very first character of the string to lowercase.
            $vars['xml_tag'][$field][0] = strtolower($vars['xml_tag'][$field][0]);
            break;
          case 'pascal':
            $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
            break;
        }
      }
      // We should always try to output valid XML.
      $vars['xml_tag'][$field] = _views_data_export_xml_tag_clean($vars['xml_tag'][$field]);
    }
  }
  else {
    template_preprocess_views_data_export_xml_body($vars);
  }
}